type Campaign implements Node {
  id: ID!
  campaign_id: String
  owner_id: String
  location: String
  picture: String
  title: String
  description: String
}

input CreateNewCampaignInput {
  title: String
  description: String
  picture: String
  city: String
  state: String
  owner_id: String
  clientMutationId: String!
}

type CreateNewCampaignPayload {
  success: String
  clientMutationId: String!
}

input CreateNewProfileInput {
  fname: String
  lname: String
  picture: String
  profile_id: String
  owner_id: String
  clientMutationId: String!
}

type CreateNewProfilePayload {
  success: String
  clientMutationId: String!
}

input CreateNewUserInput {
  fname: String
  lname: String
  email: String
  user_id: String
  clientMutationId: String!
}

type CreateNewUserPayload {
  success: String
  clientMutationId: String!
}

interface Node {
  id: ID!
}

type Profile implements Node {
  id: ID!
  profile_id: String
  owner_id: String
  name: String
  picture: String
}

type Root {
  viewer(user_id: String): Viewer
  profile(profile_id: String): Profile
  campaign(campaign_id: String): Campaign
  node(id: ID!): Node
}

type RootMutation {
  createNewUser(input: CreateNewUserInput!): CreateNewUserPayload
  createNewProfile(input: CreateNewProfileInput!): CreateNewProfilePayload
  createNewCampaign(input: CreateNewCampaignInput!): CreateNewCampaignPayload
}

type User implements Node {
  id: ID!
  uid: String
  user_id: String
  name: String
  profile: Profile
}

type Viewer implements Node {
  id: ID!
  user: User
  authenticated: Boolean
  campaigns: [Campaign]
}
